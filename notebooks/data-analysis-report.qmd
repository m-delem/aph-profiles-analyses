---
format: docx
---

# Preliminary Set-up

The data for the analysis is retrieved from the file `data/anonymized-data-n112.xlsx`.

This analysis was conducted in R language on [RStudio](https://posit.co/download/rstudio-desktop/). This analysis report was written with [Quarto](https://quarto.org/).

The code generating all the computations, figures, tables, etc. can be found in the `data-analysis-report.qmd` Quarto file.

# VVIQ group analysis

## Modelling

We first analysed the data in light of the VVIQ groups, examining differences between aphantasics and phantasics. In order to model our variables with the VVIQ groups, we adjusted generalized linear models also controlling the effect of age on all variables to isolate the group effect: 

$$Variable = \alpha  + \beta_{1}(Group_{Aphantasic}) + \beta_{2}(Group_{Phantasic}) + \beta_{3}(Age) + \epsilon$$

\newpage

```{r}
#| label: groups-means

```


```{r}
#| label: tbl-groups-means
#| eval: false

```

```{r}
#| label: groups-models
#| eval: false

```

```{r}
#| label: groups-models-import

```

```{r}
#| label: tbl-groups-models

```

```{r}
#| label: functions-posthoc

```

#### Post-hocs

```{r}
#| label: groups-posthoc-contrasts

```

```{r}
#| label: import-groups-contrasts

```

```{r}
#| label: tbl-groups-contrasts

```

## Visualization

### Radars

```{r}
#| label: fig-groups-radar-sensory

```

```{r}
#| label: fig-groups-radar-others

```

```{r}
#| label: fig-groups-radars

```

```{r}
#| label: export-radars

```

### Violins

```{r}
#| label: function-clean-names

```

```{r}
#| label: function-violins-facet

```

```{r}
#| label: fig-groups-violins

```

```{r}
#| label: export-groups-violins

```

# Cluster analysis

```{r}
#| label: variables-reduction

```

```{r}
#| label: nc

```

```{r}
#| label: df-sequential

```

```{r}
#| label: df-nc-sequential

```

```{r}
#| label: fig-nclusters

```


```{r}
#| label: export-nc-figures

```

## Computing clusters

```{r}
#| label: computing-clusters

clustering <-
  Mclust(
    df3_reduced[,2:8],
    G = 3,
    verbose = FALSE
    )
```

## Clustering results

```{r}
#| label: df-cluster

df3_cluster <-
  df3_reduced |> 
  mutate(
    cluster = clustering$classification,
    cluster = case_match(
      cluster,
      1 ~ "B",
      2 ~ "A",
      3 ~ "C"
    ),
    cluster = factor(cluster, levels = c("A", "B", "C")),
    age = pull(df2_norm, age)
    ) |> 
  select(group, cluster, everything())
```


```{r}
#| label: cluster-repartition

cluster_repartition_df <-
  df3_cluster |>  
  group_by(group, cluster) |>  
  count() |>  
  pivot_wider(
    names_from = "cluster",
    values_from = "n"
  ) |>  
  rename(
    "Group" = group, 
    "Cluster A" = `A`, 
    "Cluster B" = `B`, 
    "Cluster C" = `C`
  ) |>  
  select(
    "Group", 
    "Cluster A", 
    "Cluster B", 
    "Cluster C"
  ) |>  
  ungroup() |>  
  mutate(across(where(is.numeric), ~ replace_na(., 0))) |> 
  pivot_longer(
    -Group,
    names_to = "Cluster",
    values_to = "n"
  ) |>
  pivot_wider(
    names_from = "Group",
    values_from = "n"
  )

cluster_repartition_df |> knitr::kable(row.names = FALSE)
```

### Modelling clusters

```{r}
#| label: cluster-models
#| eval: false

models_clusters <-
  tibble(variable = seq(1, 7, 1)) |> 
  rowwise() |> 
  mutate(
    # creating sub-tables for modelling efficiently
    df = list(df3_cluster[,c(2, 10, variable+2)]),
    # fitting 4 models for each variable
    models = list(list(
      mod_0 = stan_glm(
        df[, 3][[1]] ~ 1, 
        data = df,
        diagnostic_file = file.path(tempdir(), "df0.csv"),
        refresh = FALSE
        ),
      mod_1 = stan_glm(
        df[, 3][[1]] ~ cluster, 
        data = df,
        diagnostic_file = file.path(tempdir(), "df1.csv"),
        refresh = FALSE
        ),
      mod_2 = stan_glm(
        df[, 3][[1]] ~ age, 
        data = df,
        diagnostic_file = file.path(tempdir(), "df2.csv"),
        refresh = FALSE
        ),
      mod_3 = stan_glm(
        df[, 3][[1]] ~ cluster + age, 
        data = df,
        diagnostic_file = file.path(tempdir(), "df3.csv"),
        refresh = FALSE
        ),
      mod_4 = stan_glm(
        df[, 3][[1]] ~ cluster * age, 
        data = df,
        diagnostic_file = file.path(tempdir(), "df4.csv"),
        refresh = FALSE
        )
      )),
    # comparing the models for the effect of Group
    bf_models = list(bayesfactor_models(models)),
    # comparing the models for the effect of Group
    bf_inclusion = list(
      bf_models |> 
      bayesfactor_inclusion() |> 
      as.data.frame() |>  
      mutate(log_BF = round(log_BF, digits = 2))
      )
    ) |> 
  ungroup()
```

```{r}
#| label: cluster-models-import

models_clusters <- readRDS(file = "analyses-results/models-clusters.RDS")
```

```{r}
#| label: tbl-cluster-models
#| tbl-cap: "Means and standard deviations of the scores of each cluster for every variable. The $log(BF_{inclusion})$ statistic quantifies the evidence for each effect in the Bayesian Linear Models fitted on each outcome."

tbl_clusters_means <-
  df3_cluster |> 
  select(2:9) |> 
  pivot_longer(
    -cluster,
    names_to = "Variable", 
    values_to = "value") |>  
  group_by(cluster, Variable) |>  
  summarise(stats = paste(
    round(mean(value), digits = 2), 
    " (", round(sd(value), digits = 2),")")
    ) |> 
  pivot_wider(
    names_from = cluster,
    values_from = stats
  ) |> 
  rename(
    "Variable" = Variable,
    "Cluster A" = A,
    "Cluster B" = B,
    "Cluster C" = C
  ) |> 
  mutate(
   Variable = case_match(
      Variable,
      "visual_imagery" ~ "Visual imagery",
      "spatial_imagery" ~ "Spatial imagery",
      "verbal_strategies" ~ "Verbal strategies",
      "non_verbal_reasoning" ~ "Non-verbal reasoning",
      "verbal_reasoning" ~ "Verbal reasoning",
      "span_spatial" ~ "Spatial span",
      "span_digit" ~ "Digit span"
      ),
    Variable = factor(Variable, levels = c(
      "Visual imagery",
      "Spatial imagery",
      "Verbal strategies",
      "Non-verbal reasoning",
      "Verbal reasoning",
      "Spatial span",
      "Digit span"
      ))
     ) |> 
  arrange(Variable)
  
models_clusters_stats <-
  models_clusters |>
  rowwise() |> 
  mutate(bf_inclusion = list(
    bf_inclusion |> 
    rownames_as_column(var = "variable") |> 
    pivot_longer(2:4, names_to = "stat", values_to = "value") |> 
    unite(stats, variable, stat, sep = "_") |> 
    pivot_wider(names_from = stats, values_from = value)
  )) |> 
  unnest_wider(bf_inclusion) |> 
  select(-c(variable, models, bf_models)) |>
  bind_cols(tbl_clusters_means) |> 
  select(11:14, 2:10)

tbl_clusters_models <-
  models_clusters_stats |> 
  select(1:4, 7, 10, 13) |>
  rename(
    `Cluster <br> ($log(BF_{inclusion})$)` = cluster_log_BF,
    `Age <br> ($log(BF_{inclusion})$)` = age_log_BF,
    `Cluster $\\times$ Age <br> ($log(BF_{inclusion})$)` = `age:cluster_log_BF`,
  )

tbl_clusters_models |> knitr::kable(row.names = FALSE)
```

#### Post-hocs

```{r}
#| label: clusters-posthoc-contrasts
#| eval: false

model_cluster_vis <- fn_model_fit(
  df = df3_cluster,
  outcome = df3_cluster$visual_imagery,
  predictor = df3_cluster$cluster
  )

model_cluster_spa <- fn_model_fit(
  df = df3_cluster,
  outcome = df3_cluster$spatial_imagery,
  predictor = df3_cluster$cluster
  )

model_cluster_ver <- fn_model_fit(
  df = df3_cluster,
  outcome = df3_cluster$verbal_strategies,
  predictor = df3_cluster$cluster
  )

model_cluster_non <- fn_model_fit(
  df = df3_cluster,
  outcome = df3_cluster$non_verbal_reasoning,
  predictor = df3_cluster$cluster
  )

model_cluster_vre <- fn_model_fit(
  df = df3_cluster,
  outcome = df3_cluster$verbal_reasoning,
  predictor = df3_cluster$cluster
  )

model_cluster_spa_s <- fn_model_fit(
  df = df3_cluster,
  outcome = df3_cluster$span_spatial,
  predictor = df3_cluster$cluster
  )

model_cluster_spa_d <- fn_model_fit(
  df = df3_cluster,
  outcome = df3_cluster$span_digit,
  predictor = df3_cluster$cluster
  )

contrasts_cluster_vis <- fn_model_contrasts(model_cluster_vis)
contrasts_cluster_spa <- fn_model_contrasts(model_cluster_spa)
contrasts_cluster_ver <- fn_model_contrasts(model_cluster_ver)
contrasts_cluster_non <- fn_model_contrasts(model_cluster_non)
contrasts_cluster_vre <- fn_model_contrasts(model_cluster_vre)
contrasts_cluster_spa_s <- fn_model_contrasts(model_cluster_spa_s)
contrasts_cluster_spa_d <- fn_model_contrasts(model_cluster_spa_d)

models_clusters_contrasts <- list(
  contrasts_cluster_vis,
  contrasts_cluster_spa,
  contrasts_cluster_ver,
  contrasts_cluster_non,
  contrasts_cluster_vre,
  contrasts_cluster_spa_s,
  contrasts_cluster_spa_d
)
```

```{r}
#| label: import-clusters-contrasts

models_clusters_contrasts <- readRDS(file = "analyses-results/models-clusters-contrasts.RDS")
```

```{r}
#| label: tbl-subclusters-contrasts

models_subclusters_contrasts[[1]]
models_subclusters_contrasts[[2]]
models_subclusters_contrasts[[3]]
models_subclusters_contrasts[[4]]
models_subclusters_contrasts[[5]]
models_subclusters_contrasts[[6]]
models_subclusters_contrasts[[7]]
```

### Modelling sub-clusters

```{r}
#| label: subclusters-data

df3_subcluster <-
  df3_cluster |> 
  mutate(
    cluster = case_when(
      cluster == "B" & group == "Phantasic"  ~ "B-Phantasic",
      cluster == "B" & group == "Aphantasic"  ~ "B-Aphantasic",
      TRUE ~ cluster
    ),
    cluster = factor(
      cluster, 
      levels = c("A", "B-Phantasic", "B-Aphantasic", "C"))
  )
```

```{r}
#| label: subclusters-models
#| eval: false

models_subclusters <-
  tibble(variable = seq(1, 7, 1)) |> 
  rowwise() |> 
  mutate(
    # creating sub-tables for modelling efficiently
    df = list(df3_subcluster[,c(2, 10, variable+2)]),
    # fitting 4 models for each variable
    models = list(list(
      mod_0 = stan_glm(
        df[, 3][[1]] ~ 1, 
        data = df,
        diagnostic_file = file.path(tempdir(), "df0.csv"),
        refresh = FALSE
        ),
      mod_1 = stan_glm(
        df[, 3][[1]] ~ cluster, 
        data = df,
        diagnostic_file = file.path(tempdir(), "df1.csv"),
        refresh = FALSE
        ),
      mod_2 = stan_glm(
        df[, 3][[1]] ~ age, 
        data = df,
        diagnostic_file = file.path(tempdir(), "df2.csv"),
        refresh = FALSE
        ),
      mod_3 = stan_glm(
        df[, 3][[1]] ~ cluster + age, 
        data = df,
        diagnostic_file = file.path(tempdir(), "df3.csv"),
        refresh = FALSE
        ),
      mod_4 = stan_glm(
        df[, 3][[1]] ~ cluster * age, 
        data = df,
        diagnostic_file = file.path(tempdir(), "df4.csv"),
        refresh = FALSE
        )
      )),
    # comparing the models for the effect of Group
    bf_models = list(bayesfactor_models(models)),
    # comparing the models for the effect of Group
    bf_inclusion = list(
      bf_models |> 
      bayesfactor_inclusion() |> 
      as.data.frame() |>  
      mutate(log_BF = round(log_BF, digits = 2))
      )
    ) |> 
  ungroup()
```

```{r}
#| label: subcluster-models-import

models_subclusters <- readRDS(file = "analyses-results/models-subclusters.RDS")
```

```{r}
#| label: tbl-subcluster-models
#| tbl-cap: "Means and standard deviations of the scores of each sub-cluster for every variable. The $log(BF_{inclusion})$ statistic quantifies the evidence for each effect in the Bayesian Linear Models fitted on each outcome."

tbl_subclusters_means <-
  df3_subcluster |> 
  select(2:9) |> 
  pivot_longer(
    -cluster,
    names_to = "Variable", 
    values_to = "value") |>  
  group_by(cluster, Variable) |>  
  summarise(stats = paste(
    round(mean(value), digits = 2), 
    " (", round(sd(value), digits = 2),")")
    ) |> 
  pivot_wider(
    names_from = cluster,
    values_from = stats
  ) |> 
  rename(
    "Variable" = Variable,
    "Cluster A" = A,
    "Cluster B-Phantasic" = "B-Phantasic",
    "Cluster B-Aphantasic" = "B-Aphantasic",
    "Cluster C" = C
  ) |> 
  mutate(
   Variable = case_match(
      Variable,
      "visual_imagery" ~ "Visual imagery",
      "spatial_imagery" ~ "Spatial imagery",
      "verbal_strategies" ~ "Verbal strategies",
      "non_verbal_reasoning" ~ "Non-verbal reasoning",
      "verbal_reasoning" ~ "Verbal reasoning",
      "span_spatial" ~ "Spatial span",
      "span_digit" ~ "Digit span"
      ),
    Variable = factor(Variable, levels = c(
      "Visual imagery",
      "Spatial imagery",
      "Verbal strategies",
      "Non-verbal reasoning",
      "Verbal reasoning",
      "Spatial span",
      "Digit span"
      ))
     ) |> 
  arrange(Variable)
  
models_subclusters_stats <-
  models_subclusters |>
  rowwise() |> 
  mutate(bf_inclusion = list(
    bf_inclusion |> 
    rownames_as_column(var = "variable") |> 
    pivot_longer(2:4, names_to = "stat", values_to = "value") |> 
    unite(stats, variable, stat, sep = "_") |> 
    pivot_wider(names_from = stats, values_from = value)
  )) |> 
  unnest_wider(bf_inclusion) |> 
  select(-c(variable, models, bf_models)) |>
  bind_cols(tbl_subclusters_means) |> 
  select(11:15, 2:10)

tbl_subclusters_models <-
  models_subclusters_stats |> 
  select(1:5, 8, 11, 14) |>
  rename(
    `Cluster <br> ($log(BF_{inclusion})$)` = cluster_log_BF,
    `Age <br> ($log(BF_{inclusion})$)` = age_log_BF,
    `Cluster $\\times$ Age <br> ($log(BF_{inclusion})$)` = `age:cluster_log_BF`,
  )

tbl_subclusters_models |> knitr::kable(row.names = FALSE)
```

#### Post-hocs

```{r}
#| label: subclusters-posthoc-contrasts
#| eval: false

model_sub_vis <- fn_model_fit(
  df = df3_subcluster,
  outcome = df3_subcluster$visual_imagery,
  predictor = df3_subcluster$cluster
  )

model_sub_spa <- fn_model_fit(
  df = df3_subcluster,
  outcome = df3_subcluster$spatial_imagery,
  predictor = df3_subcluster$cluster
  )

model_sub_ver <- fn_model_fit(
  df = df3_subcluster,
  outcome = df3_subcluster$verbal_strategies,
  predictor = df3_subcluster$cluster
  )

model_sub_non <- fn_model_fit(
  df = df3_subcluster,
  outcome = df3_subcluster$non_verbal_reasoning,
  predictor = df3_subcluster$cluster
  )

model_sub_vre <- fn_model_fit(
  df = df3_subcluster,
  outcome = df3_subcluster$verbal_reasoning,
  predictor = df3_subcluster$cluster
  )

model_sub_spa_s <- fn_model_fit(
  df = df3_subcluster,
  outcome = df3_subcluster$span_spatial,
  predictor = df3_subcluster$cluster
  )

model_sub_spa_d <- fn_model_fit(
  df = df3_subcluster,
  outcome = df3_subcluster$span_digit,
  predictor = df3_subcluster$cluster
  )

contrasts_sub_vis <- fn_model_contrasts(model_sub_vis)
contrasts_sub_spa <- fn_model_contrasts(model_sub_spa)
contrasts_sub_ver <- fn_model_contrasts(model_sub_ver)
contrasts_sub_non <- fn_model_contrasts(model_sub_non)
contrasts_sub_vre <- fn_model_contrasts(model_sub_vre)
contrasts_sub_spa_s <- fn_model_contrasts(model_sub_spa_s)
contrasts_sub_spa_d <- fn_model_contrasts(model_sub_spa_d)

models_subclusters_contrasts <- list(
  contrasts_sub_vis,
  contrasts_sub_spa,
  contrasts_sub_ver,
  contrasts_sub_non,
  contrasts_sub_vre,
  contrasts_sub_spa_s,
  contrasts_sub_spa_d
  )
```

```{r}
#| label: import-subclusters-contrasts

models_subclusters_contrasts <- readRDS(file = "analyses-results/models-subclusters-contrasts.RDS")
```

```{r}
#| label: tbl-subclusters-contrasts

models_subclusters_contrasts[[1]]
models_subclusters_contrasts[[2]]
models_subclusters_contrasts[[3]]
models_subclusters_contrasts[[4]]
models_subclusters_contrasts[[5]]
models_subclusters_contrasts[[6]]
models_subclusters_contrasts[[7]]
```

## Visualisations

### PCA and radar

```{r}
#| label: clusters-plot

clusters_plot <-
  clustering |> 
  fviz_mclust(
    geom = "text",
    ellipse.type = "norm",
    ellipse.level = .70,
    ellipse.alpha = .1,
    shape = 16,
    palette = pal_trio
  ) +
  theme_modern(
    base_size = 14, 
    # base_family = "serif"
    ) +
  theme(
    legend.position = "none",
    axis.title = element_text()
  ) +
  labs(
    title = NULL,
    subtitle = NULL,
    x = "Dimension 1 (35.5%)",
    y = "Dimension 2 (19.8%)"
  )

# clusters_plot
```

```{r}
#| label: clusters-radar

clusters_radar <-
  df3_cluster |>   
  select(!c(group, age)) |>
  group_by(cluster) |> 
  summarise(across(everything(),mean)) |> 
  ggradar(
    base.size = 10,
    font.radar = "serif",
    values.radar = c("0","0.5","1"),
    axis.labels = c(
      "Visual\nimagery", 
      "Spatial\nimagery", 
      "Verbal\nstrategies", 
      "Spatial\nspan",
      "Digit\nspan",
      "Non-verbal\nreasoning", 
      "Verbal\nreasoning"
    ),
    grid.label.size = 4,
    plot.extent.x.sf = 1.15,
    plot.extent.y.sf = 1.15,
    grid.min = 0, grid.mid = .5, grid.max = 1,
    label.gridline.min = FALSE,
    group.line.width = .5, group.point.size = 3,
    background.circle.transparency = .1,
    legend.title = "Cluster: ",
    axis.label.size = 4.5,
    fill = TRUE,
    fill.alpha = 0.1,
  ) +
  theme_modern() +
  theme(
    axis.text =  element_blank(),
    axis.text.x =  element_blank(),
    axis.line = element_blank(),
    # legend.position = c(0.1,0.5),
    legend.position = "left",
    legend.box.just = "right",
    legend.text = element_text(size = 16),
    legend.title = element_text(size = 16)
  ) + 
  scale_color_manual(values = pal_trio) +
  scale_fill_manual(values = pal_trio, guide = "none")
  
# clusters_radar
```

```{r}
#| label: fig-clusters-figures
#| fig-cap: "Results of the clustering."

clusters_figures <-
  ggarrange(
    clusters_plot,
    clusters_radar
  )

clusters_figures
```

```{r }
#| label: export-clusters-figures
#| eval: false

ggexport(
  clusters_figures,
  filename = "plots/clusters-figures.png",
  width = 4500,
  height = 1800,
  res = 300
)
```

### Functions

```{r}
#| label: function-clean-names-cluster

fn_clean_names_cluster <- function(df){
  df |>  
  mutate(
    Variable = case_match(
      Variable,
      "visual_imagery" ~ "Visual imagery",
      "spatial_imagery" ~ "Spatial imagery",
      "verbal_strategies" ~ "Verbal strategies",
      "non_verbal_reasoning" ~ "Non-verbal reasoning",
      "verbal_reasoning" ~ "Verbal reasoning",
      "vviq" ~ "VVIQ",
      "score_comprehension" ~ "Reading\ncomprehension",
      "span_digit" ~ "Digit span",
      "span_spatial" ~ "Spatial span",
      "wcst_accuracy" ~ "WCST"
    ),
    Variable = factor(Variable, levels = c(
      "VVIQ","Visual imagery", 
      "Spatial imagery", "Verbal strategies", 
      "Non-verbal reasoning", "Verbal reasoning", 
      "Spatial span", "Digit span", 
      "Reading\ncomprehension", "WCST"
    ))
  ) 
}
```

```{r}
#| label: function-violins-facet-cluster

dw = 1
txt_size = 32

fn_violins_facet_cluster <- function(df, nrow){
  df |>
  pivot_longer(
    -cluster,
    names_to = "Variable",
    values_to = "score"
  ) |>
  group_by(cluster, Variable) |> 
  mutate(mean = mean(score), sd = sd(score)) |> 
  fn_clean_names_cluster() |> 
  ggplot(aes(y = score, x = cluster, color = cluster, fill = cluster)) +
  geom_line(
    aes(
      x = cluster,
      y = mean,
      group = 1
      ),
    color = "grey80",
    linewidth = 1.2
    ) +
  geom_violinhalf(
    alpha = .3,
    # size_dots = .3,
    scale = "width"
    # scale = "count"
    # scale = "area"
    ) +
  geom_pointrange2(
    aes(
      x = cluster, 
      y = mean,
      ymin = if_else(mean - sd <= 0, 0, mean - sd),
      ymax = if_else(mean + sd >= 1, 1, mean + sd),
      group = cluster
      ),
    show.legend = FALSE,
    color = "black",
    size = 1.2,
    linewidth = 1.2
    ) +
  scale_y_continuous(
    expand = c(0, 0), 
    limits = c(0, 1.20),
    breaks = c(0, 0.25, 0.5, 0.75, 1)
    ) +
  scale_color_manual(values = pal_trio, guide = "none") +
  scale_fill_manual(values = pal_trio, name = "Cluster: ") +
  facet_wrap(~Variable, nrow = nrow) +
  labs(
    x = NULL,
    y = "Standardised scores"
  ) +
  theme_minimal(base_size = txt_size) +
  theme(
    legend.position = "top",
    legend.text = element_text(size = txt_size + 2),
    legend.title = element_text(size = txt_size + 2),
    axis.text.x = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.spacing.x = unit(0, "in"),
    panel.spacing.y = unit(0.3, "in"),
    strip.background = element_rect(
      fill = "grey95",
      color = "grey80",
      linewidth = .5
    ),
    panel.border = element_rect(color = "grey80", fill = NA)
  )
}
```

### Cluster violins

#### Reduced

```{r}
#| label: fig-clusters-violins-reduced

clusters_violins_reduced <-
  df3_cluster |> 
  select(2:9) |> 
  bind_cols(vviq = pull(df2_norm, vviq)) |> 
  fn_violins_facet_cluster(nrow = 2)

# clusters_violins_reduced
```

```{r}
#| label: export-clusters-violins-reduced
#| eval: false

ggexport(
  clusters_violins_reduced,
  filename = "plots/clusters-violins-reduced.png",
  width = 6000,
  height = 4000,
  res = 300
)
```

#### Complex

```{r}
#| label: fig-clusters-violins-complex

clusters_violins_complex <-
  df3_cluster |> 
  select(2) |> 
  bind_cols(score_comprehension = pull(df2_norm, score_comprehension)) |> 
  bind_cols(wcst_accuracy = pull(df2_norm, wcst_accuracy)) |> 
  fn_violins_facet_cluster(nrow = 1)

# cluster_violins_complex
```

```{r}
#| label: export-clusters-violins-complex
#| eval: false

ggexport(
  clusters_violins_complex,
  filename = "plots/clusters-violins-complex.png",
  width = 4000,
  height = 3200,
  res = 300
)
```

### Sub-clusters violins

#### Reduced

```{r}
#| label: fig-subclusters-violins-reduced

subclusters_violins_reduced <-
  df3_subcluster |> 
  select(2:9) |> 
  bind_cols(vviq = pull(df2_norm, vviq)) |> 
  fn_violins_facet_cluster(nrow = 2) +
  scale_color_manual(values = pal_quad, guide = "none") +
  scale_fill_manual(values = pal_quad, name = "Cluster: ")
```

```{r}
#| label: export-subclusters-violins-reduced
#| eval: false

ggexport(
  subclusters_violins_reduced,
  filename = "plots/subclusters-violins-reduced.png",
  width = 6000,
  height = 4000,
  res = 300
)
```

#### Complex

```{r}
#| label: fig-subclusters-violins-complex

subclusters_violins_complex <-
  df3_subcluster |> 
  select(2) |> 
  bind_cols(score_comprehension = pull(df2_norm, score_comprehension)) |> 
  bind_cols(wcst_accuracy = pull(df2_norm, wcst_accuracy)) |> 
  fn_violins_facet_cluster(nrow = 1) +
  scale_color_manual(values = pal_quad, guide = "none") +
  scale_fill_manual(values = pal_quad, name = "Cluster: ")

# subcluster_violins_complex
```

```{r}
#| label: export-subclusters-violins-complex
#| eval: false

ggexport(
  subclusters_violins_complex,
  filename = "plots/subclusters-violins-complex.png",
  width = 4000,
  height = 3200,
  res = 300
)
```

# Education, field, and occupation

## Groups

### Chi-squared

```{r}
#| label: df0-cluster

df0_cluster <-
  bind_cols(df0, df3_cluster |> select(cluster)) |> 
  select(id, age, everything())
```

```{r}
#| label: life-data

groups_education <- 
  df0_cluster |> 
  group_by(group, education) |> 
  count() |> 
  pivot_wider(
    names_from = group,
    values_from = n
  ) |> 
  mutate(across(c(1,2), ~replace_na(.x, 0)))

groups_field <-
  df0_cluster |> 
  group_by(group, field) |> 
  count() |> 
  pivot_wider(
    names_from = group,
    values_from = n
  ) |> 
  mutate(across(c(1,2), ~replace_na(.x, 0)))

groups_occupation <-
  df0_cluster |> 
  group_by(group, occupation) |> 
  count() |> 
  pivot_wider(
    names_from = group,
    values_from = n
  ) |> 
  mutate(across(c(1,2), ~replace_na(.x, 0)))

groups_education_chisq  <- chisq.test(groups_education[,c(2,3)])
groups_field_chisq      <- chisq.test(groups_field[,c(2,3)])
groups_occupation_chisq <- chisq.test(groups_occupation[,c(2,3)]) 

groups_education_chisq
# chi_sq_groups_job$observed
# chi_sq_groups_job$expected

groups_field_chisq
groups_occupation_chisq
```

### Visualisations

```{r}
#| label: function-life-viz

alpha <- 0.5

fn_life_viz <- function(df, group, category){
  df |> 
    count(group, category) |>
    group_by(group) |>
    mutate(
      sum = sum(n),
      prop = (n / sum)*100
    ) |>
    ggplot() +
    geom_col(
      aes(
        x = category, 
        y = prop,
        fill = group,
        color = group
        ),
      position = "dodge",
      alpha = alpha
    )
  }
```


```{r}
ls   <- .8
col  <- "grey80"
txt_size3 <- 18
txt_chi   <- 6

groups_education_plot <- 
  df0_cluster |>
  count(group, education) |>
  group_by(group) |>
  mutate(
    sum = sum(n),
    prop = (n / sum)*100
  ) |>
  ggplot() +
  geom_col(
    aes(
      x = education, 
      y = prop,
      fill = factor(group, levels = c("Aphantasic", "Phantasic")),
      color = factor(group, levels = c("Aphantasic", "Phantasic"))
      ),
    position = "dodge",
    alpha = alpha
  )+
  geom_vline(
    xintercept = c(1.5, 2.5, 3.5, 4.5, 5.5),
    linetype = 3,
    color = col,
    size = ls
  ) +
  geom_label(
    x = 2, 
    y = 27.5,
    label = TeX(r"($\chi^2 = 2.12, \, \textit{p} = 0.83$)"),
    color = "black",
    size = txt_chi,
  ) +
  scale_fill_manual(
    values = pal_duo, 
    breaks = c("Phantasic", "Aphantasic")
  ) +
  scale_color_manual(
    values = pal_duo, 
    breaks = c("Phantasic", "Aphantasic"),
    guide = "none") +
  labs(
    x = "Education (ISCED levels)",
    y = "Proportion (%)",
    title = NULL,
    fill = "Group:  "
  ) +
  scale_y_continuous(
    breaks = seq(0, 100, 5),
    expand = c(0, 0)
    ) +
  coord_flip() +
  theme_modern() +
  theme(
    panel.grid.major.x = element_line(),
    panel.grid.minor.x = element_line(),
    axis.title = element_text(size = txt_size3),
    axis.text = element_text(size = txt_size3),
    plot.margin = margin(10, 40, 10, 10)
  )

# groups_education_plot

groups_field_plot <- 
  df0_cluster |> 
  count(group, field_code) |> 
  group_by(group) |>
  mutate(
    sum = sum(n),
    prop = (n / sum)*100
  ) |> 
  ggplot() +
  geom_col(
    aes(
      x = field_code,
      y = prop,
      fill = group,
      color = group
      ),
    position = "dodge",
    alpha = alpha
  ) +
  geom_vline(
    xintercept = c(
      1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
      8.5, 9.5, 10.5),
    linetype = 3,
    color = col,
    size = ls
  ) +
  geom_label(
    x = 8.5, 
    y = 15,
    label = TeX(r"($\chi^2 = 5.16, \textit{p} = 0.88$)"),
    color = "black",
    size = txt_chi,
  ) +
  scale_fill_manual(values = pal_duo) +
  scale_color_manual(values = pal_duo, guide = "none") +
  labs(
    x = "Study field (ISCED-F broad fields)",
    y = "Proportion (%)",
    title = NULL,
    fill = "Group:  "
  ) +
  scale_y_continuous(
    breaks = seq(0, 100, 5),
    expand = c(0, 0)
    ) +
  theme_modern() +
  theme(
    panel.grid.major.y = element_line(),
    panel.grid.minor.y = element_line(),
    axis.title = element_text(size = txt_size3),
    axis.text = element_text(size = txt_size3)
  )

groups_occupation_plot <-
  df0_cluster |>
  count(group, occupation_code) |> 
  group_by(group) |>
  mutate(
    sum = sum(n),
    prop = (n / sum)*100
  ) |> 
  ggplot() +
  geom_col(
    aes(
      x = occupation_code, 
      y = prop,
      fill = group,
      color = group
      ),
    position = "dodge",
    alpha = alpha
  ) +
  geom_vline(
    xintercept = c(
      1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
      8.5, 9.5, 10.5, 11.5),
    linetype = 3,
    color = col,
    size = ls
  ) +
  geom_label(
    x = 8, 
    y = 22,
    label = TeX(r"($\chi^2 = 14.89, \textit{p} = 0.19$)"),
    color = "black",
    size = txt_chi,
  ) +
  scale_fill_manual(values = pal_duo) +
  scale_color_manual(values = pal_duo, guide = "none") +
  labs(
    x = "Occupation (ISCO-08 sub-major groups)",
    y = NULL,
    # y = "Proportion (%)",
    title = NULL,
    fill = "Group:  "
  ) +
  scale_y_continuous(
    breaks = seq(0, 100, 5),
    expand = c(0, 0)
    ) +
  theme_modern() +
  theme(
    panel.grid.major.y = element_line(),
    panel.grid.minor.y = element_line(),
    axis.title = element_text(size = txt_size3),
    axis.text = element_text(size = txt_size3)
  )

groups_life_plots <- (
  groups_education_plot + 
  groups_field_plot +
  groups_occupation_plot & 
    theme(
      legend.position = "top", 
      legend.title = element_text(size = txt_size3 + 2),
      legend.text = element_text(size = txt_size3 + 2),
      legend.margin = margin(0, 150, 40, 0)
      )
  ) +
  plot_layout(
    guides = "collect",
    widths = c(.75, 1, 1)
    )
```

```{r}
#| label: export-groups-life-plots
#| eval: false

ggexport(
  groups_life_plots, 
  filename = "plots/groups-life-plots.png",
  res = 300,
  width = 6000,
  height = 2000
  )
```

## Clusters

```{r}
#| label: chi-squared-clusters

chi_df_clusters_job <-
  df0_cluster |> 
  group_by(cluster, job_category) |> 
  count() |> 
  pivot_wider(
    names_from = cluster,
    values_from = n
  ) |> 
  mutate(across(c(1,2,3), ~replace_na(.x, 0)))

chi_sq_clusters_job <- chisq.test(chi_df_clusters_job[,c(2,3,4)])

chi_df_clusters_field <-
  df0_cluster |> 
  group_by(cluster, field_category) |> 
  count() |> 
  pivot_wider(
    names_from = cluster,
    values_from = n
  ) |> 
  mutate(across(c(1,2,3), ~replace_na(.x, 0)))

chi_sq_clusters_field <- chisq.test(chi_df_clusters_field[,c(2,3,4)])

chi_df_clusters_education <-
  df0_cluster |> 
  group_by(cluster, education) |> 
  count() |> 
  pivot_wider(
    names_from = cluster,
    values_from = n
  ) |> 
  mutate(across(c(1,2,3), ~replace_na(.x, 0)))

chi_sq_clusters_education <- chisq.test(chi_df_clusters_education[,c(2,3,4)])
```

```{r}
chi_sq_clusters_job
chi_sq_clusters_job$observed
chi_sq_clusters_job$expected
```

```{r}
chi_sq_clusters_field
chi_sq_clusters_field$observed
chi_sq_clusters_field$expected
```

```{r}
chi_df_clusters_education
chi_sq_clusters_education
chi_sq_clusters_education$observed
chi_sq_clusters_education$expected
```

```{r}
```


























