---
title: Data Analysis Report
subtitle: Uncovering spatial and verbal cognitive profiles in aphantasia through unsupervised clustering
# setting for proper numbering of sections
crossref: 
  chapters: true
  custom:
    - kind: float
      key: suppfig
      reference-prefix: Figure S
      space-before-numbering: false
    - kind: float
      key: supptbl
      reference-prefix: Table S
      space-before-numbering: false
supptbl-cap-location: top
echo: false # do not show the code unless explicitly asked
params:
  save_figures: true
format: html
---

```{r}
#| label: setup
#| echo: true

if (!requireNamespace("pacman")) install.packages("pacman")
pacman::p_load(
  conflicted, 
  correlation,
  here,
  factoextra,
  fs, 
  ggplot2,
  mclust,
  NbClust,
  patchwork,
  purrr,
  sessioninfo
)

# source all our functions
dir_ls(here("R"), type = "file", recurse = TRUE) |> walk(source)

# resolve package conflicts
conflicts_prefer(
  dplyr::filter(), 
  dplyr::select(),
  scales::rescale(), 
  purrr::map(),
  .quiet = TRUE
  )
```

```{r}
#| label: pipeline
#| echo: true

# load the data
df <- import_jatos_data()$data_final

# compute/save or load existing VVIQ group models
path_g_models <- here("data/r-data-structures/group_models.rds")
if (!file.exists(path_g_models)) {
  
  group_models <-
    df |>
    select(group, age, vviq:score_comprehension) |> 
    get_long_format() |> 
    model_groups()
  
  saveRDS(group_models, path_g_models)
  
} else group_models <- readRDS(path_g_models)

# correlate variables
corrs_simple  <- correlate_vars(df, partial = FALSE, correction = "bonferroni")
corrs_partial <- correlate_vars(df, partial = TRUE,  correction = "bonferroni")

# variables selected for clustering
selected_vars <- c(
  "visual_imagery", "sensory_imagery", "spatial_imagery", "verbal_strategies",
  "fluid_intelligence", "verbal_reasoning", "span_spatial"
)

# checking statistical cluster tendency and number of clusters
hopkins <- 
  (df |> 
  reduce_vars() |>
  select(any_of(selected_vars)) |>
  get_clust_tendency(n = 95))$hopkins_stat

nb_clusters <- 
  df |> 
  reduce_vars() |> 
  select(any_of(selected_vars)) |>
  n_clusters() |> 
  as.data.frame() |> 
  mutate(n_Clusters = as.factor(n_Clusters))

# compute/save or load existing model of the evolution of the number of clusters
path_n_models <- here("data/r-data-structures/nb_clusters_evolution.rds")
if (!file.exists(here(path_n_models))) {
  
  nb_clusters_evolution <- model_nb_clusters(df, selected_vars)
  
  saveRDS(nb_clusters_evolution, here(path_n_models))
  
} else {
  nb_clusters_evolution <- readRDS(here(path_n_models))
}

# cluster the data
clustering <- 
  df |> 
  reduce_vars() |> 
  select(any_of(selected_vars)) |>
  Mclust(G = 3, verbose = FALSE)

# compute/save or load existing cluster models
path_c_models <- here("data/r-data-structures/cluster_models.rds")
if (!file.exists(path_c_models)) {
  
  cluster_models <-
    df |> 
    scale_vars() |> 
    add_cluster_vars(clustering) |>
    select(
      cluster, age, visual_imagery:spatial_span, 
      wcst_accuracy, score_comprehension
    ) |>
    get_long_format() |> 
    model_clusters()
  
  saveRDS(cluster_models, path_c_models)
  
} else cluster_models <- readRDS(path_c_models)

# compute/save or load existing subcluster models
path_sc_models <- here("data/r-data-structures/subcluster_models.rds")
if (!file.exists(path_sc_models)) {
  
  subcluster_models <-
    df |> 
    scale_vars() |> 
    add_cluster_vars(clustering) |>
    select(
      subcluster, age, visual_imagery:spatial_span, 
      wcst_accuracy, score_comprehension
    ) |>
    get_long_format() |> 
    model_subclusters()
  
  saveRDS(subcluster_models, path_sc_models)
  
} else subcluster_models <- readRDS(path_sc_models)
```

# VVIQ group analysis

## Modelling

We first analysed the data in light of the VVIQ groups, examining differences between aphantasics and controls In order to model our variables with the VVIQ groups, we adjusted generalized linear models also controlling the effect of age on all variables to isolate the group effect:

$$Variable = \alpha  + \beta_{1} \cdot Group \times \beta_{2} \cdot Age + \epsilon$$

::: {#supptbl-group-modelling-results}
```{r}
#| label: group-models-table

group_models |> 
  select(
    Variable, 
    Control, Aphantasic, 
    Difference,  `95% CI`, `$log(BF_{10})$`
    ) |>
  knitr::kable()
```

Means and standard deviations of the scores of each VVIQ group for every variable. The score differences, their 95% Credible Interval and weight of evidence are reported for each variable.
:::

\newpage

## Visualizations

::: {#suppfig-group-violin-plots}
```{r}
#| label: group-violin-plots
#| fig-width: 16
#| fig-height: 7

plot_groups_violins(df)
  
if (params$save_figures) ggsave(here("figures/group-violins.png"), dpi = 600)
```

Standardised scores of the two VVIQ groups on all the questionnaires and tasks. The scores have been rescaled and standardised between 0 and 1 to be represented on the same scale. The coloured shapes represent the distribution of the scores in each group. The black dots represent the mean of each group, while the black bars represent the standard deviations. The stars represent weight of evidence thresholds in favour of a difference between the groups: \* = "*Substantial evidence*", \*\* = "*Strong evidence*", \*\*\* = "*Decisive evidence*".
:::

# Cluster analysis

## Variable reduction

Before clustering the data, making sure that variables are not redundant, i.e., that they are not too highly correlated with each other, is essential for good model fit and interpretation of the results [@fopVariableSelectionMethods2018; @zakharovApplicationKmeansClustering2016]. First, we checked the correlations between all the variables. Then, if several variables were redundant, we merged them into a single variable. The results of this analysis are displayed in @suppfig-correlation-plots. Based on this evaluation and domain knowledge, we decided to merge the visual imagery variables (VVIQ, OSIQ-Object and Psi-Q visual), drop the rest of the Psi-Q variables that were very highly correlated with the visual imagery scores, and merge the Raven Matrices and SRI scores. This process left us with 7 variables to cluster, which satisfied various criteria proposed in the literature [see e.g., @psutkaSampleSizeMaximumlikelihood2019; @zakharovApplicationKmeansClustering2016].

::: {#suppfig-correlation-plots .column-page}
```{r}
#| label: correlation-plots
#| fig-width: 19.5
#| fig-height: 12.5

plot_correlations(corrs_simple)
if (params$save_figures) ggsave(here("figures/correlations-simple.png"), dpi = 600)

plot_correlations(corrs_partial)
if (params$save_figures) ggsave(here("figures/correlations-partial.png"), dpi = 600)
```

Correlation matrix and graph of all the original variables (standardized beforehand)/ The matrix shows the correlation coefficients between all the variables, while the graph shows the significant correlations between them. The colours represent the strength and direction of the correlation: red for negative and green for positive. SRI and Raven Matrices scores are at the heart of a network, but they were only merged together (1) because of their higher correlation, (2) because they have the same format (cognitive test with MCQs) and (3) based on domain knowledge that non-verbal and spatial reasoning are very close constructs.
:::

## Number of clusters

The number of clusters was determined using the `NbClust` package [@R-NbClust], which provides 30 indices for determining the number of clusters in a dataset. The most common indices are the silhouette, Dunn, and gap statistics. The `NbClust` package provides the optimal number of clusters based on the majority rule of the indices. The results of this analysis are displayed in @suppfig-nbclust.

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
A MODIFIER
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

::: {#suppfig-nbclust}
```{r}
#| label: show-nbclust-plots
#| fig-width: 16
#| fig-height: 6

plot_nb_clust(nb_clusters, nb_clusters_evolution)

if (params$save_figures) ggsave(here("figures/cluster-n.png"), dpi = 600)
```

Determination of the optimal number of clusters through an unsupervised "agreement" method.
:::

## Clustering

::: {#supptbl-cluster-repartition}
```{r}
#| label: show-cluster-repartition

df |> 
  add_cluster_vars(clustering) |> 
  group_by(group) |> 
  count(Cluster = cluster) |> 
  pivot_wider(names_from = group, values_from = n, values_fill = 0) |> 
  knitr::kable()
```
:::

## Modelling

::: {#supptbl-cluster-modelling-results}
```{r}
#| label: show-cluster-models-table

# table of the means of each cluster
cluster_models |>
  select(
    Variable, 
    `Cluster A`, `Cluster B`, `Cluster C`,
    Cluster, Age, `Cluster $\\times$ Age`,
  ) |>
  unique() |>
  knitr::kable()

# table of the contrasts between clusters
cluster_models |>
  select(
    Variable, 
    `Cluster 1`, `Cluster 2`,
    Difference,  `95% CI`, `$log(BF_{10})$`
  ) |>
  knitr::kable()
```
:::

## Visualizations

::: {#suppfig-cluster-pca-radar-plots}
```{r}
#| label: cluster-radar-plots
#| fig-width: 15
#| fig-height: 8

plot_clusters_radars(df, clustering)

if (params$save_figures) ggsave(here("figures/cluster-radar.png"), dpi = 600)
```
:::

Contrasts that must appear:
- Visual partout
- Sensory partout
- Spatial AB et BC
- Verbal AC et BC
- Non-v reas None
- V reas AB
- Spatial span AB, AC n√©gligeable
- WCST Reading rien

```{r}
#| fig-width: 14
#| fig-height: 7

txt_size_strip = 14
txt_size_legend = 18
legend_margins = c(0, 0, 0, 0)
panel_spacing_y = 0.1
size = 1
lw = 1
lw_sd = 1
lw_bg = 0.5
pal <- c("#56B4E9", "#E69F00", "#009E73")
pal_4 <- c("#56B4E9", "#F5C710", "#E69F00", "#009E73")

df |> 
  add_cluster_vars_2(clustering_2) |> 
  scale_vars() |>  
  select(
    cluster, 
    subcluster,
    visual_imagery,
    auditory_imagery = psiq_aud, 
    sensory_imagery:span_spatial_std, 
    wcst_accuracy, score_comprehension
  ) |> 
  get_long_format_2() |> 
  group_by(subcluster, Variable) |>
  mutate(
    Cluster = fct_relabel(cluster, ~ paste("Cluster", .)),
    Variable = factor(Variable) |> fct_inorder(),
    mean = round(mean(value), digits = 2),
    sd = round(sd(value), digits = 2)
  ) |> 
  # --------------------------------------------------------------------
  ggplot(aes(y = value, x = subcluster, color = subcluster, fill = subcluster)) +
    geom_violinhalf(
      alpha = .3, 
      scale = "width", 
      color = "transparent",
      # show.legend = FALSE
    ) +
    geom_quasirandom(
      width = 0.15, 
      alpha = 0.3, 
      size = 1, 
      show.legend = FALSE
    ) +
    geom_line(
      aes(x = subcluster, y = mean, group = 1),
      color = "grey80",
      linewidth = lw
    ) +
    geom_pointrange2(
      aes(
        x = subcluster, 
        y = mean,
        ymin = if_else(mean - sd <= 0, 0, mean - sd),
        ymax = if_else(mean + sd >= 1, 1, mean + sd),
        group = subcluster
      ),
      show.legend = FALSE,
      # color       = "black",
      size        = size,
      linewidth   = lw_sd
    ) +
  # -------------------------
    # add_significance(group_effects) +
    # add_significance(group_effect_verbal) +
  # ----------------------------
  labs(
    x = NULL,
    y = "Standardised scores",
    # fill = "Cluster:  "
    fill = NULL
  ) +
    scale_y_continuous(
      expand = expansion(c(0.05, 0.15)), 
      limits = c(0, 1),
      breaks = seq(0, 1, .2)
    ) +
  scale_colour_manual(values = pal_4) +
  scale_fill_manual(values   = pal_4) +
  # -------------------------------
  facet_wrap(~Variable, nrow = 2) +
  # -------------------------------
  theme_modern() +
  theme(
    legend.position    = "top",
    legend.title       = element_text(size = txt_size_legend),
    legend.text        = element_text(size = txt_size_legend),
    legend.box.margin  = margin(legend_margins),
    axis.title.y       = element_text(size = txt_size_legend),
    axis.text.y        = element_text(size = txt_size_strip - 4),
    axis.ticks.y       = element_line(colour = "grey80"),
    axis.text.x        = element_blank(),
    axis.ticks.x       = element_blank(), 
    axis.line          = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(),
    panel.grid.minor.y = element_line(),
    panel.spacing.x    = unit(0, "in"),
    panel.spacing.y    = unit(panel_spacing_y, "in"),
    strip.text         = element_text(size = txt_size_strip, face = "plain"),
    strip.background   = element_rect(
      fill      = "grey95",
      color     = "grey80",
      linewidth = lw_bg
    ),
    panel.border = element_rect(color = "grey80", fill = NA)
  )
  
if (params$save_figures) ggsave(here("figures/subcluster-violins.png"), dpi = 600)
```

```{r}
#| label: cluster-violin-plots

# legend
name   = "Cluster:  "
labels = c(" A  ", " B  ", " C ")
nrows = 2
# sizes
lw = 1
# y scale
y_scale = c(0, 1.2)
# text sizes
txt_legend = 26
txt_panels = 20
txt_y = 16
# transparency
alpha_violins = .3

y_star_low = 1.05
y_line_low = 1.03
y_star_high = 1.14
y_line_high = 1.12

cluster_signif_l2 <- factor(c("WCST", "Reading comprehension")) |> fct_inorder()
cluster_signif_l3 <- factor(c(
    "VVIQ","Visual imagery", "Spatial imagery", 
    "Non-verbal reasoning", "Verbal reasoning", 
    "Spatial span", "Digit span")) |> fct_inorder()

cluster_signif_t2 <- factor(c("Verbal reasoning")) |> fct_inorder()
cluster_signif_t3 <- factor(c(
    "VVIQ","Visual imagery", "Verbal strategies", 
    "Non-verbal reasoning", "Spatial span")) |> fct_inorder()

cluster_signif_r1 <- factor(c("Spatial span")) |> fct_inorder()
cluster_signif_r2 <- factor(c("Verbal reasoning")) |> fct_inorder()
cluster_signif_r3 <- factor(c(
    "VVIQ","Visual imagery", "Spatial imagery", "Verbal strategies", 
    "Non-verbal reasoning", "Digit span")) |> fct_inorder()

cluster_violins <-
  df |>
  add_cluster_vars(clustering) |> 
  scale_vars() |>  
  select(
    cluster, vviq, visual_imagery:span_digit_std, 
    wcst_accuracy, score_comprehension
  ) |> 
  # select(!c(group, age)) |>
  pivot_longer(
    !cluster,
    names_to = "Variable", 
    values_to = "value"
  ) |>
  group_by(cluster, Variable) |> 
  mutate(
    cluster = fct_relabel(cluster, ~ paste("Cluster", .)),
    mean = round(mean(value), digits = 2),
    sd = round(sd(value), digits = 2)
  ) |> 
  ungroup() |> 
  mutate(
    Variable = Variable |> 
      str_to_title() |> 
      str_replace_all(c(
        "_" = " ",
        "Non verbal reasoning" = "Non-verbal reasoning",
        "Span spatial std" = "Spatial span",
        "Span digit std" = "Digit span",
        "Vviq" = "VVIQ",
        "Wcst accuracy" = "WCST", 
        "Score comprehension" = "Reading comprehension"
      )) |> 
      fct_inorder() |> 
      fct_relevel("VVIQ")
  ) |> 
  
  # Geoms
  ggplot(aes(y = value, x = cluster, color = cluster, fill = cluster)) +
  geom_line(
    aes(
      x = cluster,
      y = mean,
      group = 1
      ),
    color = "grey80",
    linewidth = lw
    ) +
  geom_violinhalf(alpha = alpha_violins, scale = "width") +
  geom_pointrange2(
    aes(
      x = cluster, 
      y = mean,
      ymin = if_else(mean - sd <= 0, 0, mean - sd),
      ymax = if_else(mean + sd >= 1, 1, mean + sd),
      group = cluster
      ),
    show.legend = FALSE,
    color = "black",
    size  = lw,
    linewidth = lw
    ) +
  
  # Significance labels
  # Left
  add_significance(
    cluster_signif_l2, stars = "**",
    x_star = 1.5, y_star = y_star_low - .075,
    x_line = 1, x_line_end = 1.95, y_line = y_line_low - .075
    ) +
  add_significance(
    cluster_signif_l3, stars = "***",
    x_star = 1.5, y_star = y_star_low,
    x_line = 1, x_line_end = 1.95, y_line = y_line_low
    ) +
  # Right
  add_significance(
    cluster_signif_r1, stars = "*",
    x_star = 2.5, y_star = y_star_low,
    x_line = 2.05, x_line_end = 3, y_line = y_line_low
    ) +
  add_significance(
    cluster_signif_r2, stars = "**",
    x_star = 2.5, y_star = y_star_low,
    x_line = 2.05, x_line_end = 3, y_line = y_line_low
    ) +
  add_significance(
    cluster_signif_r3, stars = "***",
    x_star = 2.5, y_star = y_star_low,
    x_line = 2.05, x_line_end = 3, y_line = y_line_low
    ) +
  # Top
  add_significance(
    cluster_signif_t2, stars = "**",
    x_star = 2, y_star = y_star_high,
    x_line = 1, x_line_end = 3, y_line = y_line_high
    ) +
  add_significance(
    cluster_signif_t3, stars = "***",
    x_star = 2, y_star = y_star_high,
    x_line = 1, x_line_end = 3, y_line = y_line_high
    ) +
  
  # Scales
  scale_y_continuous(
    expand = c(0, 0), 
    limits = y_scale,
    breaks = seq(0, 1, .2)
    ) +
  scale_color_manual(
    values = pal_trio, 
    name   = name,
    labels = labels
    )+
  scale_fill_manual(
    values = pal_trio, 
    name = name,
    labels = labels
    ) +
    labs(
      x = NULL,
      y = "Standardised scores"
    ) +

  # Facet
  facet_wrap(~Variable, nrow = nrows) +

  # Custom theme
  theme_violins(
    txt_size_legend = 18,
    panel_spacing_y = 0.1
  )
```

::: {#suppfig-cluster-violin-plots}
```{r}
#| label: show-cluster-violin-plots
#| fig-width: 13
#| fig-height: 7

print(cluster_violins)

if (params$save_figures) {
  ggsave(here("figures/cluster-violins.png"), cluster_violins, dpi = 600)
}
```
:::

# Education, field and occupation

## Groups

::: {#supptbl-group-association-tests}
```{r}
#| label: show-group-association-tests

df |> 
  pivot_longer(
    c(education, field, occupation), 
    names_to = "Variable", 
    values_to = "value"
  ) |> 
  select(group, Variable, value) |> 
  group_by(Variable) |> 
  nest() |> 
  rowwise() |> 
  mutate(
    table = list(
      data |> 
        group_by(group, value) |>
        count() |> 
        pivot_wider(
          names_from = group,
          values_from = n
        ) |>
        mutate(across(c(1,2), ~replace_na(.x, 0)))
    ),
    log_bf10 =
      contingencyTableBF(
        as.matrix(table[,c(2,3)]), 
        sampleType = "indepMulti", 
        fixedMargin = "cols"
      ) |> 
      as_tibble() |> 
      pull(bf) |> 
      log(),
    Variable = str_to_title(Variable)
  ) |> 
  select(Variable, log_bf10) |> 
  rename(`$log(BF_{10})$` = log_bf10) |> 
  display()
```
:::

```{r}
#| label: group-life-plots

levels = c("Aphantasic", "Control")
# scales labels and breaks
labels = c(" Control  ", " Aphantasic ")
breaks = c("Control", "Aphantasic")
# legend title
fill_title = NULL
# parameters for the vertical lines
v_col = "grey50"
v_lt  = 3  # linetype
v_ls  = .8 # line size
width = 6400
height = 2000
res = 300
# label placement
# education
x_bf_edu = 2
y_bf_edu = 25
# field
x_bf_field = 8.5
y_bf_field = 20
# occupation
x_bf_occ = 7
y_bf_occ = 30
# label text size
txt_bf = 6
# transparency of the bars
alpha = 0.5
# text sizes
txt_axis = 18
txt_legend = 26
# grand plot margins
t = 0
r = 150
b = 10
l = 0
# edu margins
t_edu = 0
r_edu = 10
b_edu = 0
l_edu = 0
# relative widths of the plots
width_p1 = .75
width_p2 = 1
width_p3 = 1

# ---------------------------------- Education 
group_education <-
  df |> 
  count(group, education) |> 
  group_by(group) |>
  mutate(
    sum = sum(n),
    prop = (n / sum)*100
  ) |>
  ggplot() +
  geom_col(
    aes(
      x = education, 
      y = prop,
      fill  = factor(group, levels  = levels),
      color = factor(group, levels = levels)
      ),
    position = "dodge",
    alpha = alpha
  ) +
  geom_vline(
    xintercept = c(1.5, 2.5, 3.5, 4.5, 5.5),
    color    = v_col,
    linetype = v_lt,
    size     = v_ls
  ) +
  geom_label(
    x = x_bf_edu, 
    y = y_bf_edu,
    label = TeX("$log(BF_{10}) = -4.88$"),
    color = "black",
    size = txt_bf,
  ) +
  scale_fill_manual(values  = pal_duo, breaks = breaks, labels = labels) +
  scale_color_manual(values = pal_duo, breaks = breaks, guide = "none") +
  labs(
    x = NULL,
    y = "Proportion (%)",
    title = NULL,
    fill = fill_title
  ) +
  scale_y_continuous(
    breaks = seq(0, 100, 5),
    expand = c(0, 0)
  ) +
  coord_flip() +
  theme(
    panel.grid.major.x = element_line(),
    panel.grid.minor.x = element_line(),
    axis.title = element_text(size = txt_axis),
    axis.text  = element_text(size = txt_axis),
    plot.margin = margin(t_edu, r_edu, b_edu, l_edu)
  )
  
# ---------------------------------- Field
group_field <-
  df |> 
  count(group, field_code) |> 
  group_by(group) |>
  mutate(
    sum = sum(n),
    prop = (n / sum)*100
  ) |>
  ggplot() +
  geom_col(
    aes(
      x = field_code, 
      y = prop,
      fill  = group,
      color = group
      ),
    position = "dodge",
    alpha = alpha
  ) +
  geom_vline(
    xintercept = c(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5),
    color    = v_col,
    linetype = v_lt,
    size     = v_ls
  ) +
  geom_label(
    x = x_bf_field, 
    y = y_bf_field,
    label = TeX(r"($log(BF_{10}) = -5.41$)"),
    color = "black",
    size = txt_bf,
  ) +
  scale_fill_manual(values  = pal_duo, labels = labels) +
  scale_color_manual(values = pal_duo, guide = "none") +
  labs(
    x = "Study field (ISCED-F broad fields)",
    y = "Proportion (%)",
    title = NULL,
    fill = fill_title
  ) +
  scale_y_continuous(
    breaks = seq(0, 100, 5),
    expand = c(0, 0)
  ) +
  theme(
    panel.grid.major.y = element_line(),
    panel.grid.minor.y = element_line(),
    axis.title = element_text(size = txt_axis),
    axis.text  = element_text(size = txt_axis)
  )

# ---------------------------------- Occupation
group_occupation <-
  df |>
  count(group, occupation_code) |> 
  group_by(group) |>
  mutate(
    sum = sum(n),
    prop = (n / sum)*100
  ) |> 
  ggplot() +
  geom_col(
    aes(
      x = occupation_code, 
      y = prop,
      fill  = group,
      color = group
      ),
    position = "dodge",
    alpha = alpha
  ) +
  geom_vline(
    xintercept = c(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5),
    color    = v_col,
    linetype = v_lt,
    size     = v_ls
  ) +
  geom_label(
    x = x_bf_occ,
    y = y_bf_occ,
    label = TeX(r"($log(BF_{10}) = -4.37$)"),
    color = "black",
    size = txt_bf,
  ) +
  scale_fill_manual(values  = pal_duo, labels = labels) +
  scale_color_manual(values = pal_duo, guide = "none") +
  labs(
    x = "Occupation (ISCO-08 sub-major groups)",
    y = NULL,
    # y = "Proportion (%)",
    title = NULL,
    fill = fill_title
  ) +
  scale_y_continuous(
    breaks = seq(0, 100, 5),
    expand = c(0, 0)
  ) +
  theme(
    panel.grid.major.y = element_line(),
    panel.grid.minor.y = element_line(),
    axis.title = element_text(size = txt_axis),
    axis.text  = element_text(size = txt_axis)
  )

# ---------------------------------- Joint plot
group_life <-
  group_education + group_field + group_occupation +
  plot_layout(
    guides = "collect",
    widths = c(width_p1, width_p2, width_p3)
  ) &
  theme(
    legend.position = "top",
    legend.title = element_text(size = txt_legend),
    legend.text  = element_text(size = txt_legend),
    legend.box.margin = margin(t, r, b, l)
  )
```

::: {#suppfig-group-life-plots}
```{r}
#| label: show-group-life-plots
#| fig-width: 16
#| fig-height: 6

print(group_life)

if (params$save_figures) {
  ggsave(here("figures/group-life.png"), group_life, dpi = 600)
}
```
:::

## Clusters

::: {#supptbl-cluster-association-tests}
```{r}
#| label: show-cluster-association-tests

df |> 
  add_cluster_vars(clustering) |> 
  pivot_longer(
    c(education, field, occupation), 
    names_to = "Variable", 
    values_to = "value"
  ) |> 
  select(cluster, Variable, value) |> 
  group_by(Variable) |> 
  nest() |> 
  rowwise() |> 
  mutate(
    table = list(
      data |> 
        group_by(cluster, value) |>
        count() |> 
        pivot_wider(
          names_from = cluster,
          values_from = n
        ) |>
        mutate(across(c(1,2,3), ~replace_na(.x, 0)))
    ),
    log_bf10 =
      contingencyTableBF(
        as.matrix(table[,c(2,3,4)]), 
        sampleType = "jointMulti"
      ) |> 
      as_tibble() |> 
      pull(bf) |> 
      log(),
    Variable = str_to_title(Variable)
  ) |> 
  select(Variable, log_bf10) |> 
  rename(`$log(BF_{10})$` = log_bf10) |> 
  display()

df |> 
  add_cluster_vars(clustering) |> 
  group_by(cluster) |>
  filter(group == "Aphantasic") |>
  count(field) |> 
  pivot_wider(names_from = cluster, values_from = n) |> 
  mutate(across(c(B, C), ~replace_na(.x, 0))) |> 
  mutate(total = B + C) |> 
  rename_with(~ paste("Aph. in ", .), B:C) |> 
  rename("Field" = field, "Total Aph." = total) |> 
  display()
```
:::

```{r}
#| label: cluster-life-plots
#| fig-width: 16
#| fig-height: 6

levels = c("C", "B", "A")
# scales labels and breaks
labels = c(" A   ", " B   ", " C   ")
breaks = c("A", "B", "C")
# legend title
fill_title = "Cluster:   "
# accent for evidence
accent = "red"
# parameters for the vertical lines
v_col = "grey50"
v_lt  = 3  # linetype
v_ls  = .8 # line size
width = 6400 
height = 2000
res = 300
# label placement
# education
x_bf_edu = 2 
y_bf_edu = 24
# field
x_bf_field = 8.5 
y_bf_field = 20
# occupation
x_bf_occ = 7
y_bf_occ = 35
# label text size
txt_bf = 6
# transparency of the bars
alpha = 0.5
# text sizes
txt_axis = 18
txt_legend = 26
# grand plot margins
t = 0
r = 150
b = 10
l = 0
# edu margins
t_edu = 10
r_edu = 40
b_edu = 10
l_edu = 10
# relative widths of the plots
width_p1 = .75
width_p2 = 1
width_p3 = 1

# ---------------------------------- Education
cluster_education <-
  df |> 
  add_cluster_vars(clustering) |> 
  count(cluster, education) |>
  group_by(cluster) |>
  mutate(
    sum = sum(n),
    prop = (n / sum)*100
  ) |>
  ggplot() +
  geom_col(
    aes(
      x = education, 
      y = prop,
      fill  =  factor(cluster, levels = levels),
      color = factor(cluster, levels = levels)
      ),
    position = "dodge",
    alpha = alpha
  )+
  geom_vline(
    xintercept = c(1.5, 2.5, 3.5, 4.5, 5.5),
      color    = v_col,
      linetype = v_lt,
      size     = v_ls
  ) +
  geom_label(
    x = x_bf_edu, 
    y = y_bf_edu,
    label = TeX(r"($log(BF_{10}) = -6.90$)"),
    color = "black",
    size = txt_bf,
  ) +
  scale_fill_manual(values  = pal_trio, breaks = breaks, labels = labels) +
  scale_color_manual(values = pal_trio, breaks = breaks, guide = "none") +
  labs(
    # x = "Education (ISCED levels)",
    x = NULL,
    y = "Proportion (%)",
    title = NULL,
    fill = fill_title
  ) +
  scale_y_continuous(
    breaks = seq(0, 100, 5),
    expand = c(0, 0)
    ) +
  coord_flip() +
  theme(
    panel.grid.major.x = element_line(),
    panel.grid.minor.x = element_line(),
    axis.title = element_text(size = txt_axis),
    axis.text  = element_text(size = txt_axis),
    plot.margin = margin(t_edu, r_edu, b_edu, l_edu)
  )

# ---------------------------------- Field
cluster_field <-
  df |> 
  add_cluster_vars(clustering) |>
  count(cluster, field_code) |> 
  group_by(cluster) |>
  mutate(
    sum = sum(n),
    prop = (n / sum)*100
  ) |> 
  ggplot() +
  geom_col(
    aes(
      x = field_code,
      y = prop,
      fill  = cluster,
      color = cluster
      ),
    position = "dodge",
    alpha = alpha
  ) +
  geom_vline(
    xintercept = c(
      1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
      8.5, 9.5, 10.5),
    color    = v_col,
    linetype = v_lt,
    size     = v_ls
  ) +
  geom_label(
    x = x_bf_field,
    y = y_bf_field,
    label = TeX(r"($log(BF_{10}) = -2.82$)"),
    color = "black",
    size = txt_bf,
  ) +
  scale_fill_manual(values  = pal_trio, labels = labels) +
  scale_color_manual(values = pal_trio, guide = "none") +
  labs(
    x = "Study field (ISCED-F broad fields)",
    y = "Proportion (%)",
    title = NULL,
    fill = fill_title
  ) +
  scale_y_continuous(
    breaks = seq(0, 100, 5),
    expand = c(0, 0)
  ) +
  theme(
    panel.grid.major.y = element_line(),
    panel.grid.minor.y = element_line(),
    axis.title = element_text(size = txt_axis),
    axis.text  = element_text(size = txt_axis)
  )

# ---------------------------------- Occupation
cluster_occupation <-
  df |> 
  add_cluster_vars(clustering) |>
  count(cluster, occupation_code) |> 
  group_by(cluster) |>
  mutate(
    sum = sum(n),
    prop = (n / sum)*100
  ) |> 
  ggplot() +
  geom_col(
    aes(
      x = occupation_code, 
      y = prop,
      fill  = cluster,
      color = cluster
      ),
    position = "dodge",
    alpha = alpha
  ) +
  geom_vline(
    xintercept = c(
      1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5,
      8.5, 9.5, 10.5, 11.5),
    color    = v_col,
    linetype = v_lt,
    size     = v_ls
  ) +
  geom_label(
    x = x_bf_occ, 
    y = y_bf_occ,
    label = TeX(r"($log(BF_{10}) = 0.83$)"),
    color = accent,
    size = txt_bf,
  ) +
  scale_fill_manual(values  = pal_trio, labels = labels) +
  scale_color_manual(values = pal_trio, guide = "none") +
  labs(
    x = "Occupation (ISCO-08 sub-major groups)",
    y = NULL,
    title = NULL,
    fill = fill_title
  ) +
  scale_y_continuous(
    breaks = seq(0, 100, 5),
    expand = c(0, 0)
  ) +
  theme(
    panel.grid.major.y = element_line(),
    panel.grid.minor.y = element_line(),
    axis.title = element_text(size = txt_axis),
    axis.text  = element_text(size = txt_axis)
  )

# ---------------------------------- Joint plot
cluster_life <-
  cluster_education + cluster_field + cluster_occupation +
  plot_layout(
    guides = "collect",
    widths = c(width_p1, width_p2, width_p3)
  ) &
  theme(
    legend.position = "top",
    legend.title = element_text(size = txt_legend),
    legend.text  = element_text(size = txt_legend),
    legend.box.margin = margin(t, r, b, l)
  )
```

::: {#suppfig-cluster-life-plots}
```{r}
#| label: show-cluster-life-plots
#| fig-width: 16
#| fig-height: 6

print(cluster_life)

if (params$save_figures) {
  ggsave(here("figures/cluster-life.png"), cluster_life, dpi = 600)
}
```
:::


:::: {.content-visible when-format="html"}
¬† ¬† ¬†

::: {.callout-note collapse="true"}
# Session information

```{r}
#| label: session-information
#| echo: false

cat("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
report_system(session = sessionInfo())
cat("Packages used:")
report_packages(session = sessionInfo())
cat("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
```
:::
::::
